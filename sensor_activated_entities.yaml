blueprint:
  domain: automation
  name: Sensor Activated Entities
  description: |
    This automation controls the state and brightness of one or more light entities and the state of one or more
    optional fan entities based on:
      - The state of one or more sensor entities
      - The current phase of the location

    Notes: 
      - A duration of '0' prevents the light from turning on during that phase.
      - A duration of '999' keeps the light on indefinitely.
      - If a light does not support brightness control, the Brightness percent will be ignored.

  input:
    sensors:
      name: Sensors
      description: The sensor(s) that will trigger this automation.
      selector:
        entity:
          filter:
            domain: binary_sensor
          multiple: true

    lights:
      name: Lights
      description: The light entity(ies) which will be controlled.
      selector:
        entity:
          filter:
            domain: light
          multiple: true

    fans:
      name: Fans (Optional)
      description: The fan entity(ies) which will be controlled. These would typically be exhaust fans.
      default: []
      selector:
        entity:
          filter:
            domain: fan
          multiple: true

    delay:
      name: Fan Delay
      description: Duration in seconds to delay before turning on the fan(s). If the sensor clears before this delay is achieved, then the fans will not turn on. This delay will be added to the duration of the lights.
      default: 0
      selector:
        number:
          min: 0
          max: 300
          unit_of_measurement: seconds

    off_entities:
      name: Off Entities (Optional)
      description: The entities that will be turned off when the sensor is cleared.
      default: []
      selector:
        entity:
          filter:
            domain:
              - fan
              - light
              - switch
          multiple: true

    duration_morning:
      name: Morning - Duration
      description: Duration in minutes for which the lights will remain on.
      default: 15
      selector:
        number:
          min: 0
          max: 999
          unit_of_measurement: minutes
    brightness_morning:
      name: Morning - Brightness
      description: Brightness level of the lights.
      default: 75
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"

    duration_day:
      name: Day - Duration
      description: Duration in minutes during which the lights will remain on.
      default: 15
      selector:
        number:
          min: 0
          max: 999
          unit_of_measurement: minutes
    brightness_day:
      name: Day - Brightness
      description: Brightness level of the lights.
      default: 100
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"

    duration_evening:
      name: Evening - Duration
      description: Duration in minutes during which the lights will remain on.
      default: 15
      selector:
        number:
          min: 0
          max: 999
          unit_of_measurement: minutes
    brightness_evening:
      name: Evening - Brightness
      description: Brightness level of the lights.
      default: 75
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"

    duration_night:
      name: Night - Duration
      description: Duration in minutes during which the lights will remain on.
      default: 5
      selector:
        number:
          min: 0
          max: 999
          unit_of_measurement: minutes
    brightness_night:
      name: Night - Brightness
      description: Brightness level of the lights.
      default: 25
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"

variables:
  phase: "{{ states('input_select.location_phase') }}"
  fans: !input fans
  delay: !input delay
  durations:
    Morning: !input duration_morning
    Day: !input duration_day
    Evening: !input duration_evening
    Night: !input duration_night
  brightness_levels:
    Morning: !input brightness_morning
    Day: !input brightness_day
    Evening: !input brightness_evening
    Night: !input brightness_night
  duration: "{{ durations[phase] | default(0) }}"
  brightness: "{{ brightness_levels[phase] | default(100) }}"

trigger:
  - trigger: state
    entity_id: !input sensors
    to: "on"

condition:
  - condition: template
    value_template: "{{ duration > 0 }}"

action:
  - action: light.turn_on
    data:
      transition: 1
      brightness_pct: "{{ brightness }}"
    target:
      entity_id: !input lights
  - if:
      - condition: template
        value_template: "{{ fans | length > 0 }}"
    then:
      - delay:
          seconds: "{{ delay }}"
      - if:
          - condition: state
            entity_id: !input sensors
            state: "on"
        then:
          - action: fan.turn_on
            data: {}
            target:
              entity_id: !input fans
  - if:
      - condition: template
        value_template: "{{ duration != 999 }}"
    then:
      - delay:
          seconds: "{{ duration * 60 - delay }}"
      - if:
          - condition: state
            entity_id: !input sensors
            state: "on"
        then:
          - wait_for_trigger:
              - trigger: state
                entity_id: !input sensors
                to: "off"
      - action: light.turn_off
        data:
          transition: 1
        target:
          entity_id: !input lights
      - if:
          - condition: template
            value_template: "{{ fans | length > 0 }}"
        then:
          - action: fan.turn_off
            target:
              entity_id: !input fans
      - if:
          - condition: template
            value_template: "{{ off_entities | length > 0 }}"
        then:
          - action: homeassistant.turn_off
            target:
              entity_id: !input off_entities

mode: single
