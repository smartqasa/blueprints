blueprint:
  domain: automation
  name: Sensor Activated Entities
  description: |
    This automation controls the state and brightness of one or more light entities and the state of one or more
    optional fan entities based on:
      - The state of one or more sensor entities
      - The current phase of the location

    Notes: 
      - A duration of '0' prevents the light from turning on during that phase.
      - A duration of '999' keeps the light on indefinitely.
      - If a light does not support brightness control, the Brightness percent will be ignored.

  input:
    sensor:
      name: Sensor
      description: The sensor(s) that will trigger this automation.
      selector:
        entity:
          filter:
            domain: binary_sensor
          multiple: true

    light:
      name: Light
      description: The light entity(ies) which will be controlled.
      selector:
        entity:
          filter:
            domain: light
          multiple: true

    fan:
      name: Fan (Optional)
      description: The fan or switch entity which will be controlled. This would typically be an exhaust fan.
      default: []
      selector:
        entity:
          filter:
            domain:
              - fan
              - switch

    fan_delay:
      name: Fan Delay
      description: Duration in seconds to delay before turning on the exhaust fan(s). If the sensor clears before this delay is achieved, then the fans will not turn on.
      default: 0
      selector:
        number:
          min: 0
          max: 300
          unit_of_measurement: seconds

    off_entities:
      name: Off Entities (Optional)
      description: The entities that will be turned off when the sensor is cleared.
      default: []
      selector:
        entity:
          filter:
            domain:
              - fan
              - light
              - switch
          multiple: true

    duration_morning:
      name: Morning - Duration
      description: Duration in minutes for which the lights will remain on.
      default: 15
      selector:
        number:
          min: 0
          max: 999
          unit_of_measurement: minutes
    brightness_morning:
      name: Morning - Brightness
      description: Brightness level of the lights.
      default: 75
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"

    duration_day:
      name: Day - Duration
      description: Duration in minutes during which the lights will remain on.
      default: 15
      selector:
        number:
          min: 0
          max: 999
          unit_of_measurement: minutes
    brightness_day:
      name: Day - Brightness
      description: Brightness level of the lights.
      default: 100
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"

    duration_evening:
      name: Evening - Duration
      description: Duration in minutes during which the lights will remain on.
      default: 15
      selector:
        number:
          min: 0
          max: 999
          unit_of_measurement: minutes
    brightness_evening:
      name: Evening - Brightness
      description: Brightness level of the lights.
      default: 75
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"

    duration_night:
      name: Night - Duration
      description: Duration in minutes during which the lights will remain on.
      default: 5
      selector:
        number:
          min: 0
          max: 999
          unit_of_measurement: minutes
    brightness_night:
      name: Night - Brightness
      description: Brightness level of the lights.
      default: 20
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"

variables:
  phase: "{{ states('input_select.location_phase') }}"
  fan: !input fan
  fan_delay: !input fan_delay
  durations:
    Morning: !input duration_morning
    Day: !input duration_day
    Evening: !input duration_evening
    Night: !input duration_night
  brightness_levels:
    Morning: !input brightness_morning
    Day: !input brightness_day
    Evening: !input brightness_evening
    Night: !input brightness_night
  duration: "{{ durations[phase] | default(0) * 60 }}"
  brightness: "{{ brightness_levels[phase] | default(100) }}"

trigger:
  - trigger: state
    entity_id: !input sensor
    to: "on"

condition:
  - condition: template
    value_template: "{{ duration > 0 }}"

action:
  - action: light.turn_on
    data:
      transition: 1
      brightness_pct: "{{ brightness }}"
    target:
      entity_id: !input light
  - if:
      - condition: template
        value_template: "{{ fan != '' }}"
    then:
      - delay:
          seconds: "{{ fan_delay }}"
      - if:
          - condition: state
            entity_id: !input sensor
            state: "on"
        then:
          - action: homeassistant.turn_on
            data: {}
            target:
              entity_id: !input fan
  - if:
      - condition: template
        value_template: "{{ duration != 999 }}"
    then:
      - delay:
          seconds: "{{ max(duration - fan_delay, 0) }}"
      - if:
          - condition: state
            entity_id: !input sensor
            state: "on"
        then:
          - wait_for_trigger:
              - trigger: state
                entity_id: !input sensor
                to: "off"
      - action: light.turn_off
        data:
          transition: 2
        target:
          entity_id: !input light
      - if:
          - condition: template
            value_template: "{{ fan != '' }}"
        then:
          - action: homeassistant.turn_off
            target:
              entity_id: !input fan
      - if:
          - condition: template
            value_template: "{{ off_entities | length > 0 }}"
        then:
          - action: homeassistant.turn_off
            target:
              entity_id: !input off_entities

mode: single
