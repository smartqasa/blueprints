blueprint:
  domain: automation
  name: Sensor Activated Entities
  description: |
    This automation controls the state and brightness of one or more light entities and the state of one or more
    optional fan entities based on:
      - The state of one or more sensor entities
      - The current phase of the location

    Notes: 
      - A 'Duration' of '0' prevents the light from turning on during that phase.
      - A 'Duration' of '999' keeps the light on until the sensor is triggered again.
      - If a light does not support brightness control, 'Brightness' will be ignored.
  mode: restart
  input:
    sensors:
      name: Sensor(s)
      description: The sensor(s) that will trigger this automation.
      selector:
        entity:
          filter:
            domain: binary_sensor
          multiple: true

    lights:
      name: Lights
      description: The light entity(ies) which will be controlled.
      selector:
        entity:
          filter:
            domain: light
          multiple: true

    fans:
      name: Fans (Optional)
      description: The fan entity(ies) which will be controlled.
      selector:
        entity:
          filter:
            domain: fan
          multiple: true

    duration_morning:
      name: Morning - Duration
      description: Duration in minutes for which the lights will remain on.
      default: 15
      selector:
        number:
          min: 0
          max: 999
          unit_of_measurement: minutes
    brightness_morning:
      name: Morning - Brightness
      description: Brightness level of the lights.
      default: 75
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"

    duration_day:
      name: Day - Duration
      description: Duration in minutes for which the lights will remain on.
      default: 15
      selector:
        number:
          min: 0
          max: 999
          unit_of_measurement: minutes
    brightness_day:
      name: Day - Brightness
      description: Brightness level of the lights.
      default: 100
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"

    duration_evening:
      name: Evening - Duration
      description: Duration in minutes for which the lights will remain on.
      default: 15
      selector:
        number:
          min: 0
          max: 999
          unit_of_measurement: minutes
    brightness_evening:
      name: Evening - Brightness
      description: Brightness level of the lights.
      default: 75
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"

    duration_night:
      name: Night - Duration
      description: Duration in minutes for which the lights will remain on.
      default: 5
      selector:
        number:
          min: 0
          max: 999
          unit_of_measurement: minutes
    brightness_night:
      name: Night - Brightness
      description: Brightness level of the lights.
      default: 25
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"

variables:
  phase: "{{ states('input_select.location_phase') }}"
  durations:
    Morning: !input duration_morning
    Day: !input duration_day
    Evening: !input duration_evening
    Night: !input duration_night
  brightness_levels:
    Morning: !input brightness_morning
    Day: !input brightness_day
    Evening: !input brightness_evening
    Night: !input brightness_night
  duration: "{{ durations[phase] | default(0) }}"
  brightness: "{{ brightness_levels[phase] | default(0) }}"

trigger:
  - trigger: state
    entity_id: !input sensors
    to: "on"

action:
  - if:
      - condition: template
        value_template: "{{ duration > 0 }}"
    then:
      - if:
          - condition: template
            value_template: "{{ brightness > 0 }}"
        then:
          - action: light.turn_on
            data:
              transition: 1
              brightness_pct: "{{ brightness }}"
            target:
              entity_id: !input lights
          - action: fan.turn_on
            data: {}
            target:
              entity_id: !input fans
      - if:
          - condition: template
            value_template: "{{ duration != 999 }}"
        then:
          - wait_for_trigger:
              - platform: state
                entity_id: !input sensors
                to: "off"
                for:
                  minutes: "{{ duration }}"

          - action: light.turn_off
            target:
              entity_id: !input lights
          - action: fan.turn_off
            target:
              entity_id: !input fans
