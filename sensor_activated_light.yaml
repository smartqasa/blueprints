blueprint:
  domain: automation
  name: Sensor Activated Lights
  description: |
    This automation controls the state and brightness of one or more light entities based on:
      - The state of one or more sensor entities
      - The current phase of the location

    Notes: 
      - A duration of '0' prevents the light from turning on during that phase.
      - A duration of '99' keeps the light on indefinitely.
      - If a light does not support brightness control, 'Brightness' will be ignored.

  input:
    sensor:
      name: Sensor(s)
      description: The sensor(s) that will trigger this automation.
      default: []
      selector:
        entity:
          filter:
            domain: binary_sensor
          multiple: true

    sensor_clear:
      name: Sensor Clear Time
      description: The time in seceonds that it takes for the sensor to clear. For a motion sensor, this is usually 60 seconds.
      default: 60
      selector:
        number:
          min: 0
          max: 360
          unit_of_measurement: seconds

    light:
      name: Light(s)
      description: The light entity(ies) which will be controlled.
      default: []
      selector:
        entity:
          filter:
            domain: light
          multiple: true

    transition_on:
      name: Transition On
      description: The transition speed in seconds when turning the light(s) on.
      default: 1
      selector:
        number:
          min: 0
          max: 30
          unit_of_measurement: seconds

    transition_off:
      name: Transition Off
      description: The transition speed in seconds when turning the light(s) off.
      default: 2
      selector:
        number:
          min: 0
          max: 30
          unit_of_measurement: seconds

    duration_morning:
      name: Morning - Duration
      description: Duration in minutes for which the lights will remain on.
      default: 15
      selector:
        number:
          min: 0
          max: 99
          unit_of_measurement: minutes

    brightness_morning:
      name: Morning - Brightness
      description: Brightness level of the lights.
      default: 75
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"

    duration_day:
      name: Day - Duration
      description: Duration in minutes for which the lights will remain on.
      default: 15
      selector:
        number:
          min: 0
          max: 99
          unit_of_measurement: minutes

    brightness_day:
      name: Day - Brightness
      description: Brightness level of the lights.
      default: 100
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"

    duration_evening:
      name: Evening - Duration
      description: Duration in minutes for which the lights will remain on.
      default: 15
      selector:
        number:
          min: 0
          max: 99
          unit_of_measurement: minutes

    brightness_evening:
      name: Evening - Brightness
      description: Brightness level of the lights.
      default: 75
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"

    duration_night:
      name: Night - Duration
      description: Duration in minutes for which the lights will remain on.
      default: 5
      selector:
        number:
          min: 0
          max: 99
          unit_of_measurement: minutes

    brightness_night:
      name: Night - Brightness
      description: Brightness level of the lights.
      default: 20
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"

    off_entities:
      name: Off Entities (Optional)
      description: Additional entities that will be turned off when the sensor state changes to off.
      selector:
        entity:
          filter:
            domain:
              - fan
              - light
              - switch
          multiple: true

variables:
  sensor_clear: !input sensor_clear
  phase: "{{ states('input_select.location_phase') }}"
  durations:
    Morning: !input duration_morning
    Day: !input duration_day
    Evening: !input duration_evening
    Night: !input duration_night
  brightness_levels:
    Morning: !input brightness_morning
    Day: !input brightness_day
    Evening: !input brightness_evening
    Night: !input brightness_night
  duration: "{{ durations[phase] | default(0) }}"
  brightness: "{{ brightness_levels[phase] | default(100) }}"
  off_entities: !input off_entities

trigger:
  - platform: state
    entity_id: !input sensor
    to: "on"
    id: sensor_on
  - platform: state
    entity_id: !input sensor
    to: "off"
    id: sensor_off

condition:
  - condition: template
    value_template: "{{ duration > 0 }}"

action:
  - choose:
      - conditions:
          - condition: trigger
            id: sensor_on
        sequence:
          - if:
              - condition: state
                entity_id: !input light
                state: "off"
            then:
              - action: light.turn_on
                data:
                  transition: !input transition_on
                  brightness_pct: "{{ brightness }}"
                target:
                  entity_id: !input light
      - conditions:
          - condition: trigger
            id: sensor_off
        sequence:
          - if:
              - condition: template
                value_template: "{{ duration != 99 }}"
            then:
              - delay:
                  seconds: "{{ max(duration * 60 - sensor_clear, 0) }}"
              - action: light.turn_off
                data:
                  transition: !input transition_off
                target:
                  entity_id: !input light

              - if:
                  - condition: template
                    value_template: "{{ off_entities | length > 0 }}"
                then:
                  - action: homeassistant.turn_off
                    target:
                      entity_id: !input off_entities
mode: restart
