blueprint:
  domain: automation
  name: Sensor Activated Exhaust
  description: |
    This automation controls the state of an exhaust fan entity based on combination of states of a light and sensor entity.

  input:
    sensor:
      name: Sensor
      description: The sensor that will trigger the exhaust fan's scheduled start.
      selector:
        entity:
          filter:
            domain: binary_sensor

    sensor_clear:
      name: Sensor Clear Time
      description: The number of seceonds that it takes for the sensor to clear. For a motion sensor, this is usually 60 seconds.
      default: 60
      selector:
        number:
          min: 0
          max: 360
          unit_of_measurement: seconds

    active:
      name: Active Time
      description: The number of seconds the sensor must remain active before turning on the exhaust fan. The Sensor Clear Time will be added to this value. If the sensor state changes to off before this delay is achieved, then the fans will not turn on.
      default: 90
      selector:
        number:
          min: 0
          max: 180
          unit_of_measurement: seconds

    fan:
      name: Fan
      description: The exhaust fan entity(ies) which will be controlled.
      selector:
        entity:
          filter:
            domain:
              - fan
              - light
              - switch
          multiple: true

    light:
      name: Light
      description: The light entity that will trigger the exhaust fan's scheduled stop.
      selector:
        entity:
          filter:
            domain: light
          multiple: true

    duration:
      name: Duration
      description: The duration in minutes during which the exhaust fan will remain running after the light turns off.
      default: 5
      selector:
        number:
          min: 0
          max: 10
          unit_of_measurement: minutes

variables:
  active: !input active
  sensor_clear: !input sensor_clear

trigger:
  - trigger: state
    entity_id: !input sensor
    to: "on"
    for:
      seconds: "{{ active + sensor_clear }}"
    id: "sensor_on"
  - trigger: state
    entity_id: !input light
    to: "off"
    for:
      minutes: !input duration
    id: "light_off"

condition: []

action:
  - choose:
      - conditions:
          - condition: trigger
            id: "sensor_on"
        sequence:
          - if:
              - condition: state
                entity_id: !input fan
                state: "off"
            then:
              - action: homeassistant.turn_on
                target:
                  entity_id: !input fan
      - conditions:
          - condition: trigger
            id: "light_off"
        sequence:
          - if:
              - condition: state
                entity_id: !input fan
                state: "on"
            then:
              - action: homeassistant.turn_off
                target:
                  entity_id: !input fan

mode: restart
