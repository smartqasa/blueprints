blueprint:
  domain: automation
  name: Sensor Activated Exhaust
  description: |
    This automation controls the state of an exhaust fan entity based on combination of states of a light and sensor entity.

  input:
    light:
      name: Light
      description: The light entity that will trigger the exhaust fan's scheduled stop.
      selector:
        entity:
          filter:
            domain: light
          multiple: true

    delay:
      name: Delayed Start
      description: The number of seconds the sensor must remain active before turning on the exhaust fan. The Sensor Clear Time will be added to this value. If the sensor state changes to off before this delay is achieved, then the fans will not turn on.
      default: 90
      selector:
        number:
          min: 0
          max: 300
          unit_of_measurement: seconds

    sensor:
      name: Sensor
      description: The sensor that will trigger the exhaust fan's scheduled start.
      selector:
        entity:
          filter:
            domain: binary_sensor

    window:
      name: Motion Window
      description: The number of seconds wait for the sensor to become active following the delay.
      default: 60
      selector:
        number:
          min: 15
          max: 120
          unit_of_measurement: seconds

    exhaust:
      name: Exhaust Fan
      description: The exhaust fan entity(ies) which will be controlled.
      selector:
        entity:
          filter:
            domain:
              - fan
              - light
              - switch
          multiple: true

    duration:
      name: Duration
      description: The duration in minutes during which the exhaust fan will remain running after the light turns off.
      default: 5
      selector:
        number:
          min: 0
          max: 10
          unit_of_measurement: minutes

variables: {}

trigger:
  - trigger: state
    entity_id: !input light
    to: "on"

condition: []

action:
  - wait_for_trigger:
      - trigger: state
        entity_id: !input light
        to: "off"
    timeout:
      seconds: !input delay
  - if:
      condition: template
      value_template: "{{ wait.completed }}"
    then:
      - stop:
  - if:
      - condition: state
        entity_id: !input sensor
        state: "off"
    then:
      - wait_for_trigger:
          - trigger: state
            entity_id: !input sensor
            to: "on"
        timeout:
          seconds: !input window
        continue_on_timeout: false
  - action: homeassistant.turn_on
    target:
      entity_id: !input exhaust
  - delay:
      minutes: !input duration
  - if:
      condition: state
      entity_id: !input light
      state: "off"
    then:
      - action: homeassistant.turn_off
        target:
          entity_id: !input exhaust
    else:
      - wait_for_trigger:
          - trigger: state
            entity_id: !input light
            to: "off"
        timeout:
          minutes: !input duration
      - action: homeassistant.turn_off
        target:
          entity_id: !input exhaust

mode: single
